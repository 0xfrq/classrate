generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts          Post[]
  reviews        ClassReview[]
  lectureReviews LectureReview[]
  exercises      Exercise[]
}

model Post {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Class {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  description String?
  instructor  String?
  semester    String?
  year        Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reviews   ClassReview[]
  exercises Exercise[]
  lectures  Lecture[]
}

model Lecture {
  id          String   @id @default(cuid())
  title       String
  description String?
  lectureNumber Int?
  date        DateTime?
  classId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  class   Class @relation(fields: [classId], references: [id], onDelete: Cascade)
  reviews LectureReview[]
}

model LectureReview {
  id        String   @id @default(cuid())
  rating    Int
  content   String
  lectureId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lecture Lecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([lectureId, userId])
}

model ClassReview {
  id        String   @id @default(cuid())
  rating    Int
  content   String
  classId   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  class Class @relation(fields: [classId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([classId, userId])
}

model Exercise {
  id          String   @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  completed   Boolean  @default(false)
  classId     String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  class Class @relation(fields: [classId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}
